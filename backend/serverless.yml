org: gyzidelmal
app: todo-paapp
service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    ATTACHEMENTS_TABLE: Attachement-${self:provider.stage}
    TODOS_ID_INDEX: TodoAttachementIdIndex-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    TODOS_S3_BUCKET: serverless-todos-attachement-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    AUTH_0_SECRET: 0abj8-NY3gFgn915v8HeRtRhqw8y91BgSAXPKtXanFnSn_GPMYg0Q8JTZ5EDBbIJ

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_ID_INDEX}
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #     - s3:GetObject
    #   Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*
   
   
    # - Effect: Allow
    #   Action:
    #     - secretsmanager:GetSecretValue
    #   Resource: !Ref Auth0Secret
    # - Effect: Allow
    #   Action:
    #     - kms:Decrypt
    #   Resource: !GetAtt KMSKey.Arn

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          
  # TODO: Configure this function
 # GetTodos:
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create a todo item
            description: create a todo item
            requestModels:
              'application/json': TodoCreatoinRequest


          

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a todo item
            description: update a todo item
            requestModels:
              'application/json': TodoUpdateRequest



  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true



  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: TODO API
        description: Serverless application for TODO  saving
    models:
      - name: TodoCreatoinRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}


resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TODOItemsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          # - AttributeName: dueDate
          #   AttributeType: S
          # - AttributeName: done
          #   AttributeType: B
          # - AttributeName: attachmentUrl
          #   AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    # TODO: Add any necessary AWS resources


    AttachmentsBucket:
      Type: AWS::S3::Bucket
    # DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
